<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="MAIN" Id="{7212b5d2-df33-4916-8615-e5304be4440a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	state		: UINT := 0;
	
	mbMaster	: ModbusRtuMaster_KL6x22B;
	mbUnit		: BYTE := 1;
	mbQuantity	: UINT := 1;
	mbErrorFlag	: BOOL;
	mbErrorId	: MODBUS_ERRORS;
	mbExecute	: BOOL;
	mbBusy		: BOOL;
	mbBytesRec	: UINT;
	
	mbReadAddr	: UINT;
	mbWriteAddr : WORD;
	mbReadData	: WORD;
	mbWriteData : WORD;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
CASE state OF
0: // init
	mbExecute := TRUE;
1: // read input register
	mbMaster.ReadInputRegs(
		UnitID:= mbUnit, 
		Quantity:= mbQuantity, 
		MBAddr:= mbReadAddr, 
		cbLength:= SIZEOF(mbReadData), 
		pMemoryAddr:= ADR(mbReadData), 
		Execute:= mbExecute, 
		Timeout:= T#1S, 
		BUSY=> mbBusy, 
		Error=> mbErrorFlag, 
		ErrorId=> mbErrorId, 
		cbRead=> mbBytesRec);
	// if busy, turn off exec; if not busy, flip exec
	IF mbBusy = TRUE THEN
		mbExecute := FALSE;
	//ELSE
	//	mbExecute := mbExecute XOR TRUE;
	END_IF
	
2: // read register
	mbMaster.ReadRegs(
		UnitID:= mbUnit, 
		Quantity:= mbQuantity, 
		MBAddr:= mbReadAddr, 
		cbLength:= SIZEOF(mbReadData), 
		pMemoryAddr:= ADR(mbReadData), 
		Execute:= mbExecute, 
		Timeout:= T#1S, 
		BUSY=> mbBusy, 
		Error=> mbErrorFlag, 
		ErrorId=> mbErrorId, 
		cbRead=> mbBytesRec);
	// if busy, turn off exec; if not busy, flip exec
	IF mbBusy = TRUE THEN
		mbExecute := FALSE;
	//ELSE
	//	mbExecute := mbExecute XOR TRUE;
	END_IF
	
3: // write register
	mbMaster.WriteSingleRegister(
		UnitID:= mbUnit, 
		Quantity:= mbQuantity, 
		MBAddr:= mbReadAddr, 
		cbLength:= SIZEOF(mbWriteData), 
		pMemoryAddr:= ADR(mbWriteData), 
		Execute:= mbExecute, 
		Timeout:= T#1S, 
		BUSY=> mbBusy, 
		Error=> mbErrorFlag, 
		ErrorId=> mbErrorId, 
		cbRead=> mbBytesRec);
		
	// if busy, turn off exec; if not busy, flip exec
	IF mbBusy = TRUE THEN
		mbExecute := FALSE;
	//ELSE
	//	mbExecute := mbExecute XOR TRUE;
	END_IF
	
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="91" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="101" Count="10" />
      <LineId Id="99" Count="0" />
      <LineId Id="182" Count="4" />
      <LineId Id="181" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="147" Count="9" />
      <LineId Id="146" Count="0" />
      <LineId Id="176" Count="4" />
      <LineId Id="175" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="158" Count="8" />
      <LineId Id="27" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="4" />
      <LineId Id="169" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="139" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>